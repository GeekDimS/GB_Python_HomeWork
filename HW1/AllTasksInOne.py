# 1-ый семинар, д/з
# Сформировать список из N членов последовательности. Для N = 5: 1, -3, 9, -27, 81 и т.д.
# Для натурального n создать словарь индекс-значение, состоящий из элементов последовательности 3n + 1. Для n = 6: {1: 4, 2: 7, 3: 10, 4: 13, 5: 16, 6: 19}
# Пользователь задаёт две строки. Определить количество вхождений одной строки в другой.
# Подсчитать сумму цифр в вещественном числе.
# Написать программу получающую набор произведений чисел от 1 до N. Пример: пусть N = 4, тогда [ 1, 2, 6, 24 ]

# Правило наименования в Питоне: https://clck.ru/hckwg


# Сформировать список из N членов последовательности. Для N = 5: 1, -3, 9, -27, 81 и т.д.

from ast import For


N = int(input('Введите количество членов последовательности:  '))
listing = []
for i in range(N):
    listing.append((-3)**i)
print(listing)

# Для натурального n создать словарь индекс-значение, состоящий из элементов 
# последовательности 3n + 1. Для n = 6: {1: 4, 2: 7, 3: 10, 4: 13, 5: 16, 6: 19}

n = int(input('Введите количество членов последовательности:  '))
sequence = {}
for i in range(1, n + 1):
    sequence[i] = 3*i + 1
print(sequence)

# Пользователь задаёт две строки. Определить количество вхождений одной строки в другой.

def CountSubstring(s, sub):
    i = 0
    count = 0
    i = s.find(sub, i)
    while i != -1:
        i = s.find(sub, i+1)
        count += 1
    else:
        return count

s1 = input('Введите первую строку:  ')
s2 = input('Введите вторую строку:  ')
if(len(s1) >= len(s2)):
    print(CountSubstring(s1, s2))
    # print(s1.count(s2))                # Вариант замены верхней строки без написания функции
else:
    print(CountSubstring(s2, s1))
    # print(s2.count(s1))                # Вариант замены верхней строки без написания функции

# Подсчитать сумму цифр в вещественном числе.

sV = str(input('Введите вещественное число:  '))

sV = sV.strip(' -')
sV = sV.replace('.','')
sV = sV.replace(',','')

if sV.isnumeric() == False:
    print("Введено не число")
    exit
res = 0
for i in sV:
    res += int(i)
print(res)

# Написать программу получающую набор произведений чисел от 1 до N. 
# Пример: пусть N = 4, тогда [ 1, 2, 6, 24 ]

v = int(input('Введите целое число:  '))
vOut = int(1)
for item in range(1,v+1):
    vOut = vOut*item
print(vOut)

# 1. Написать функцию write_in_morse, которая принимает строку на английском языке и возвращает ее перевод на символьный язык Морзе. Ввод не должен зависеть от регистра.
# Да поможет вам этот словарь:
# char_to_dots = {
#   'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.',
#   'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..',
#   'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.',
#   'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-',
#   'Y': '-.--', 'Z': '--..', ' ': ' ', '0': '-----',
#   '1': '.----', '2': '..---', '3': '...--', '4': '....-', '5': '.....',
#   '6': '-....', '7': '--...', '8': '---..', '9': '----.',
#   '&': '.-...', "'": '.----.', '@': '.--.-.', ')': '-.--.-', '(': '-.--.',
#   ':': '---...', ',': '--..--', '=': '-...-', '!': '-.-.--', '.': '.-.-.-',
#   '-': '-....-', '+': '.-.-.', '"': '.-..-.', '?': '..--..', '/': '-..-.'
# }

import string


def write_in_morse(stringInp):
    char_to_dots = {

        'A': '.-', 'B': '-...', 'C': '-.-.', 'D': '-..', 'E': '.', 'F': '..-.',
        'G': '--.', 'H': '....', 'I': '..', 'J': '.---', 'K': '-.-', 'L': '.-..',
        'M': '--', 'N': '-.', 'O': '---', 'P': '.--.', 'Q': '--.-', 'R': '.-.',
        'S': '...', 'T': '-', 'U': '..-', 'V': '...-', 'W': '.--', 'X': '-..-',
        'Y': '-.--', 'Z': '--..', ' ': ' ', '0': '-----',
        '1': '.----', '2': '..---', '3': '...--', '4': '....-', '5': '.....',
        '6': '-....', '7': '--...', '8': '---..', '9': '----.',
        '&': '.-...', "'": '.----.', '@': '.--.-.', ')': '-.--.-', '(': '-.--.',
        ':': '---...', ',': '--..--', '=': '-...-', '!': '-.-.--', '.': '.-.-.-',
        '-': '-....-', '+': '.-.-.', '"': '.-..-.', '?': '..--..', '/': '-..-.'
        }
    sTemp = str(stringInp).upper()
    stringOut = []
    for item in sTemp:
        stringOut.append(char_to_dots.get(item, ''))
    return(stringOut)

s = input('Введите текст на английском языке:  ')
print(" ".join(write_in_morse(s)))